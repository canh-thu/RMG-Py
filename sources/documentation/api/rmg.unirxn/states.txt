********************************
The ``rmg.unirxn.states`` Module
********************************

.. module:: rmg.unirxn.states

This module contains functions for calculation of the density of states based on spectroscopic degrees of freedom.


Methods in ``rmg.unirxn.states``
================================

.. function:: densityofstates(E, Ngrains, vib, Nvib, rot, Nrot, hind, Nhind, symm, linear, rho, msg)
	
	 Determine the density of states at the specified energies. The parameters
	 are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `E`        in     The energies to determine the density of states at in
	                   cm^-1
	 `Ngrains`  in     The number of energy grains
	 `vib`      in     An array of harmonic oscillator frequencies in cm^-1
	 `Nvib`     in     The number of harmonic oscillator modes
	 `rot`      in     An array of rigid rotor frequencies in cm^-1
	 `Nrot`     in     The number of rigid rotor modes
	 `hind`     in     An array of hindered rotor frequencies and barrier
	                   heights in cm^-1
	 `Nhind`    in     The number of hindered rotor modes
	 `symm`     in     The combined external + internal symmetry number
	 `linear`   in     1 if the molecule is linear, 0 if nonlinear
	 `rho`      out    The density of states at the specified energies in
	                   (cm^-1)^-1
	 `msg`      out    If the subroutine was unsuccessful, this string will
	                   contain a brief message describing the error; the
	                   string will be empty if the subroutine was successful
	 ========== ====== ========================================================



.. function:: rigidRotorDensityOfStates(E, Ngrains, rot, Nrot, linear, rho, msg)
	 
	 Determine the rigid rotor density of states at the specified energies. The
	 formula is
	
	 .. math:: \rho(E) = q_\mathrm{r} = \frac{1}{\sigma \tilde{\omega}}
	
	 for linear rotors and
	
	 .. math:: \rho(E) = \frac{q_\mathrm{r} E^{1/2}}{\frac{1}{2}!} =
	           \frac{\sqrt{\pi}}{\sigma} \left[ \frac{1}{\tilde{\omega_\mathrm{A}} \tilde{\omega_\mathrm{B}} \tilde{\omega_\mathrm{C}} } \right]^{1/2} \frac{E^{1/2}}{\frac{1}{2}!}
	
	 for nonlinear rotors. The parameters are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `E`        in     The energies to determine the density of states at in
	                   cm^-1
	 `Ngrains`  in     The number of energy grains
	 `rot`      in     An array of rigid rotor frequencies in cm^-1
	 `Nrot`     in     The number of rigid rotor modes
	 `linear`   in     1 if the molecule is linear, 0 if nonlinear
	 `rho`      out    The density of states at the specified energies in
	                   (cm^-1)^-1
	 `msg`      out    If the subroutine was unsuccessful, this string will
	                   contain a brief message describing the error; the
	                   string will be empty if the subroutine was successful
	 ========== ====== ========================================================



.. function:: kRotorDensityOfStates(E, Ngrains, rho, msg)
	 
	 Determine the rigid rotor density of states at the specified energies. The
	 formula is
	
	 .. math:: \rho(E) = q_\mathrm{r} = \frac{1}{\sigma \tilde{\omega}}
	
	 for linear rotors and
	
	 .. math:: \rho(E) = \frac{q_\mathrm{r} E^{1/2}}{\frac{1}{2}!} =
	           \frac{\sqrt{\pi}}{\sigma} \left[ \frac{1}{\tilde{\omega_\mathrm{A}} \tilde{\omega_\mathrm{B}} \tilde{\omega_\mathrm{C}} } \right]^{1/2} \frac{E^{1/2}}{\frac{1}{2}!}
	
	 for nonlinear rotors. The parameters are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `E`        in     The energies to determine the density of states at in
	                   cm^-1
	 `Ngrains`  in     The number of energy grains
	 `rho`      out    The density of states at the specified energies in
	                   (cm^-1)^-1
	 `msg`      out    If the subroutine was unsuccessful, this string will
	                   contain a brief message describing the error; the
	                   string will be empty if the subroutine was successful
	 ========== ====== ========================================================



.. function:: hinderedRotorDensityOfStates(E, Ngrains, hind, rho, msg)
	 
	 Determine the density of states for the internal hindered rotor modes at
	 specified energies. The 1D Pitzer model of a hindered rotor is used; the
	 formula is
	
	 .. math:: \rho(E) = \frac{2 q_\mathrm{1f}}{\pi^{3/2} V_0^{1/2}} \mathcal{K}(E / V_0) \hspace{20pt} E < V_0
	
	 and
	
	 .. math:: \rho(E) = \frac{2 q_\mathrm{1f}}{\pi^{3/2} E^{1/2}} \mathcal{K}(V_0 / E) \hspace{20pt} E > V_0
	
	 for
	
	 .. math:: q_\mathrm{1f} = \frac{1}{\sigma} \left( \frac{\pi}{h c \tilde{\omega}} \right)^{1/2}
	
	 The parameters are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `E`        in     The energies to determine the density of states at in
	                   cm^-1
	 `Ngrains`  in     The number of energy grains
	 `hind`     in     A hindered rotor frequency-barrier pair, both in cm^-1
	 `rho`      out    The density of states at the specified energies in
	                   (cm^-1)^-1
	 `msg`      out    If the subroutine was unsuccessful, this string will
	                   contain a brief message describing the error; the
	                   string will be empty if the subroutine was successful
	 ========== ====== ========================================================



.. function:: ellipk(m, tol, K)
	
	Evaluate the complete elliptic integral of the first kind at the value
	`m` (such that 0 <= m < 1) to a desired tolerance of `tol`.



.. function:: beyerSwinehart(E, Ngrains, vib, Nvib, rho, msg)
	 
	 Convolve vibrational modes into a density of states vector using the
	 Beyer-Swinehart algorithm. The parameters are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `E`        in     The energies to determine the density of states at in
	                   cm^-1
	 `Ngrains`  in     The number of energy grains
	 `vib`      in     An array of harmonic oscillator frequencies in cm^-1
	 `Nvib`     in     The number of harmonic oscillator modes
	 `rho`      in/out The density of states at the specified energies in
	                   (cm^-1)^-1
	 `msg`      out    If the subroutine was unsuccessful, this string will
	                   contain a brief message describing the error; the
	                   string will be empty if the subroutine was successful
	 ========== ====== ========================================================



.. function:: beyerSwinehartSR(E, Ngrains, vib, Nvib, rho, msg)
	 
	 Convolve vibrational modes into a density of states vector using the
	 Beyer-Swinehart algorithm with the Stein-Rabinovitch modification. The
	 Stein-Rabinovitch modification is more accurate, but more expensive. The
	 parameters are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `E`        in     The energies to determine the density of states at in
	                   cm^-1
	 `Ngrains`  in     The number of energy grains
	 `vib`      in     An array of harmonic oscillator frequencies in cm^-1
	 `Nvib`     in     The number of harmonic oscillator modes
	 `rho`      in/out The density of states at the specified energies in
	                   (cm^-1)^-1
	 `msg`      out    If the subroutine was unsuccessful, this string will
	                   contain a brief message describing the error; the
	                   string will be empty if the subroutine was successful
	 ========== ====== ========================================================



.. function:: convolve(rho1, rho2, E, Ngrains)
	 
	 Convolve two density of states vectors. The parameters are:
	
	 ========== ====== ========================================================
	 Parameter  Intent Description
	 ========== ====== ========================================================
	 `rho1`     in     The first density of states vector in (cm^-1)^-1
	 `rho2`     in     The second density of states vector in (cm^-1)^-1
	 `E`        in     The energies in cm^-1
	 `Ngrains`  in     The number of energy grains
	 `convolve` out    The convolved density of states in (cm^-1)^-1
	 ========== ====== ========================================================


