***********************
Writing RMG Input Files
***********************

RMG accepts as input text files formatted using `eXtensible Markup Language (XML) <http://en.wikipedia.org/wiki/XML>`_. A working knowledge of XML is assumed in the discussion that follows. Several examples of RMG input files are distributed with RMG; these can be found in the ``/examples/rmg`` folder.

All RMG input files use ``<rmginput>`` as a root element. The contents of the input file can be broken down into five sections, which are outlined below. The use of XML means that the order of these sections does not matter.

Database List
=============

RMG draws the necessary parameters for its generated models from one or more databases that are distributed with RMG. In this section the databases that RMG should use for this job are indicated. Each database is indicated with a ``<database>`` element, which contains as text the folder name of the database. When the database is loaded, RMG will search the directory ``/data/`` for a folder with this name. The ``<database>`` element also has one required attribute, the database `type`, which can take one of the values in the table below:

	==================  ========================================================
	Value               Description
	==================  ========================================================
	``general``         A general database, containing thermodynamics, kinetics,
	                    and frequency data
	``seedMechanism``   A database containing a list of species (with thermo)
	                    and a list of reactions (with kinetics) to seed the
	                    generated mechanism with
	==================  ========================================================
	
All ``<database>`` elements must be enclosed within a ``<databaseList>`` element, which is itself a child of the root ``<rmginput>`` element. Exactly one general database must be specified.

The simplest jobs will simply draw from the general database distributed with RMG. The syntax for this is::

	<databaseList>
		<database type="general">RMG_database</database>
	</databaseList>

Another common task is to seed the reaction mechanism with a set of species and reactions from a known mechanism. When using a seed mechanism, RMG will *not* immediately generate reactions for the species in the mechanism; however, as new species are created, reactions involving the seed species will be created. The following code tells RMG to seed with the GRI-Mech 3.0 mechanism bundled with RMG, then use the general RMG database to grow the mechanism::

	<databaseList>
		<database type="general">RMG_database</database>
		<database type="seedMechanism">GRI-Mech3.0</database>
	</databaseList>

Species List
============

Each RMG input file contains a list of the species to use as a starting point when generating the mechanism. These are indicated with a ``<species>`` element for each species, which are themselves gathered in a ``<speciesList>`` element. Each ``<species>`` element has two required and one optional attribute:

	==================  ========================================================
	Attribute           Description
	==================  ========================================================
	``id``              A short string identifier used within the input file
	                    *only* to identify the species (e.g. to specify initial
	                    concentration in a reaction system)
	``label``           A more descriptive string label
	``reactive``        ``"yes"`` if the species is reactive, ``"no"`` if not;
	                    default is ``"yes"`` if not indicated
	==================  ========================================================
	
The structure of one resonance form of each species must also be indicated. This is done using the ``<structure>`` element, a required child of each ``<species>`` element. The text contained within the ``<structure>`` element depends on the value of its (required) ``format`` attribute, which at this time can be one of ``"SMILES"``, ``"InChI"``, or ``"CML"``. As an example, consider the species `1,3-hexadiene <http://cactus.nci.nih.gov/chemical/structure/C%3DCC%3DCCC/image>`_. This block uses `SMILES <http://en.wikipedia.org/wiki/SMILES>`_ to define the structure::

	<speciesList>
		<species id="spec1" label="1,3-hexadiene" reactive="yes">
			<structure format="SMILES">C=CC=CCC</structure>
		</species>
	</speciesList>

This block uses `InChI <http://www.iupac.org/inchi/>`_ to define the structure::

	<speciesList>
		<species id="spec1" label="1,3-hexadiene" reactive="yes">
			<structure format="InChI">
				InChI=1S/C6H10/c1-3-5-6-4-2/h3,5-6H,1,4H2,2H3
			</structure>
		</species>
	</speciesList>

And this block uses `chemical markup language (CML) <http://cml.sourceforge.net/>`_ to define the structure::

	<speciesList>
		<species id="spec1" label="1,3-hexadiene" reactive="yes">
			<structure format="cml">
				<molecule>
					<atomArray>
						<atom id="a1" elementType="C" />
						<atom id="a2" elementType="C" />
						<atom id="a3" elementType="C" />
						<atom id="a4" elementType="C" />
						<atom id="a5" elementType="C" />
						<atom id="a6" elementType="C" />
					</atomArray>
					<bondArray>
						<bond atomRefs2="a1 a2" order="D" />
						<bond atomRefs2="a2 a3" order="S" />
						<bond atomRefs2="a3 a4" order="D" />
						<bond atomRefs2="a4 a5" order="S" />
						<bond atomRefs2="a5 a6" order="S" />
					</bondArray>
				</molecule>
			</structure>
		</species>
	</speciesList>

RMG uses `OpenBabel <http://openbabel.org/>`_ to parse these structures, and so inherits any technical idiosyncrasies from OpenBabel.

Reaction System List
====================

.. warning:: The syntax of the reaction system list is subject to change as more reaction system classes are added.

Each RMG input file contains a list of reaction systems in which to generate the reaction model. A successful RMG job will result in a single reaction model that is valid in all of the reaction systems used to generate the model. Each reaction system are indicated with a ``<reactionSystem>`` element, which are themselves gathered in a ``<reactionSystemList>`` element. The contents of each ``<reactionSystem>`` element vary dramatically with the class of the reaction system, which is indicated by the ``class`` attribute. Currently there is only one class of reaction system available: ``"BatchReactor"``.

Many of the quantities needed to specify the reaction system parameters are stored in quantity elements. These elements use a quantity descriptor as the tag name and have a ``units`` attribute that defines the units of the value contained as text. For example, the following syntax indicates a volume::

	<volume units="m^3">1.0</volume>

RMG uses the `quantities <http://packages.python.org/quantities/index.html>`_ package to parse the units and convert them to SI for internal storage and manipulation, and thus inherits its technical idiosyncrasies. In particular, the quantities package does not honor the SI convention of treating all units after the slash (solidus) as in the denominator, so parentheses should be used to clarify meaning. 

Batch Reactors
--------------

A variety of parameters must be specified to enumerate the batch reactor. The volume, surface area, heat transfer coefficient, and coefficient of expansion are indicated with ``<volume>``, ``<area>``, ``<heatTransferCoefficient>``, and ``<expansionCoefficient>`` quantity elements.  The ``<isothermal/>`` or ``<adiabatic/>`` elements can be used in place of the ``<heatTransferCoefficient>`` element if isothermal or adiabatic behavior is desired. Similarly, the ``<isobaric/>`` or ``<isochoric/>`` elements can be used in place of the ``<expansionCoefficient>`` element if isobaric or isochoric behavior is desired. In both cases RMG will attempt to set the corresponding coefficient such that the desired behavior is produced.

A physical property model must also be specified for the reactor contents using the ``<physicalPropertyModel>`` element. This has one required attribute, the ``type``, which currently takes the following values:

	==========================  ================================================
	Value                       Description
	==========================  ================================================
	``idealGas``                An ideal gas mixture
	``incompressibleLiquid``    An incompressible liquid mixture
	==========================  ================================================

The initial conditions for the reactor are set within an ``<initialConditions>`` element. The temperature and pressure are specified with ``<temperature>`` and ``<pressure>`` quantity elements, respectively. The mole fraction of each species is specified with the ``<moleFraction>`` element, which takes an attribute ``speciesID`` that specifies the string ``id`` of the corresponding species. 

The reservoir conditions -- the conditions external to the reactor -- are specified using the ``<reservoirConditions>`` element, which has contents that are identical to the ``<initialConditions>`` element: temperature, pressure, and mole fractions. If the external system is air, then the ``<air/>`` element can be used in place of the mole fractions.

The following, taken from the 1,3-hexadiene example, indicates a isothermal, isobaric batch reactor containing an ideal gas mixture::

	<reactionSystemList>
		<reactionSystem class="BatchReactor">
			<volume units="m^3">1.0</volume>
			<area units="m^2">1.0</area>
			<physicalPropertyModel type="idealGas"/>
			<heatTransferCoefficient units="W/(m^2*K)">1.0e12</heatTransferCoefficient>
			<expansionCoefficient units="m/(s*Pa)">1.0e12</expansionCoefficient>
			<isobaric/>
			<initialConditions>
				<temperature units="K">1350.0</temperature>
				<pressure units="bar">1.0</pressure>
				<moleFraction speciesID="spec1">6.829e-4</moleFraction>
				<moleFraction speciesID="spec3">0.104</moleFraction>
				<moleFraction speciesID="spec6">0.0156</moleFraction>
				<moleFraction speciesID="spec0">0.8797</moleFraction>
			</initialConditions>
			<reservoirConditions>
				<temperature units="K">1350.0</temperature>
				<pressure units="bar">1.0</pressure>
				<air/>
			</reservoirConditions>
		</reactionSystem>
	</reactionSystemList>

Simulation Parameters
=====================

The absolute and relative tolerances to use when integrating are specified as ``atol`` and ``rtol`` attributes of the ``<simulator>`` element, as indicated in the example below::

	<simulator atol="1e-16" rtol="1e-8" />

The tolerances that control the reaction model growth are contained in the ``<fluxTolerance>`` element. There are three tolerances that need to be specified: the tolerance below which species will be discarded from the edge (``<keepInEdge>``), the tolerance above which species will be moved from the edge to the core (``<moveToCore>``), and the tolerance above which the simulation will be interrupted (``<interruptSimulation>``). The ``<keepInEdge>`` tolerance can be set to zero if this feature is not desired; however, for large models it is useful to help control memory use. The size of the generated model is controlled by the ``<moveToCore>`` tolerance: the lower the tolerance, the larger the generated model. There is often some value in completing a simulation when the ``<moveToCore>`` tolerance has only been slightly exceeded, so often the ``<interruptSimulation>`` tolerance is set slightly above the ``<moveToCore>`` tolerance. An example of empirically reasonable starting values is given below::

	<fluxTolerance>
		<keepInEdge>1e-24</keepInEdge>
		<moveToCore>0.1</moveToCore>
		<interruptSimulation>1.0</interruptSimulation>
	</fluxTolerance>

The absolute size of the generated reaction model can also be capped using the ``<maximumModelSize>`` element. The only item that can currently be capped is the number of edge species, which is done using the ``<edgeSpecies>`` element as in the example below::

	<maximumModelSize>
		<edgeSpecies>10000</edgeSpecies>
	</maximumModelSize>

Note that there is no parent element that groups the ``<simulator>``, ``<fluxTolerance>``, and ``<maximumModelSize>`` elements other than the root element.

Option List
===========

The final section is a set of options for controlling how RMG generates the reaction model and what extra features are enabled. In general an option is enabled by including the appropriate element and disabled by deleting or commenting out the same element. Some options have parameters associated with them, which are specified as child elements. There are currently four options:

	==================================  ========================================
	Element                             Description
	==================================  ========================================
	``<drawMolecules/>``                Generate images of each species
	``<generatePlots/>``                Generate plots of the simulation results
	``<spectralDataEstimation/>``       Estimate spectral degrees of freedom for
	                                    each species
	``<unimolecularReactionNetworks>``  Process unimolecular reaction networks,
	                                    which have pressure-dependent kinetics
	==================================  ========================================
	
Unimolecular Reaction Networks
------------------------------

.. note:: This option requires that the ``<spectralDataEstimation/>`` option also be turned on.

The ``<unimolecularReactionNetworks/>`` option requires several parameters. There are two approximate methods available for estimating phenomenological rate coefficients, modified strong collision (fast and robust, less accurate) and reservoir state (better approximations, somewhat slower and less robust). The ``<method>`` element is used for this purpose, and can have values of ``"modifiedStrongCollision"`` and ``"reservoirState"``, respectively. The methods work in the microcanonical domain, so the maximum energy grain size and minimum number of grains are specified using the ``<grainSize>`` quantity element and ``<numberOfGrains>`` element. The chosen method is applied at a set of temperatures and pressures, which are indicated with ``<temperatures>`` and ``<pressures>`` quantity elements. Finally, the interpolation model to use is set via the ``<interpolationModel>`` element and its ``type`` attribute; currently the only allowed value is ``"PDepArrhenius"``, which fits a modified Arrhenius equation at each pressure and interpolates between them on a log-log scale.

An example of the syntax is given below::

	<unimolecularReactionNetworks>
		<method>reservoirState</method>
		<grainSize units="kJ/mol">5.0</grainSize>
		<numberOfGrains>250</numberOfGrains>
		<temperatures units="K">300.0 400.0 500.0 600.0 800.0 1000.0 1500.0 2000.0</temperatures>
		<pressures units="bar">0.01 0.1 1.0 10.0 100.0</pressures>
		<interpolationModel type="PDepArrhenius"/>
	</unimolecularReactionNetworks>

