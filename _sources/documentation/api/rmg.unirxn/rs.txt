****************************
The ``rmg.unirxn.rs`` Module
****************************

.. module:: rmg.unirxn.rs

This module contains functions that use the reservoir state (RS) approximation to estimate the phenomenological rate coefficients for a unimolecular reaction network. The RS method is actually a combination of two approximations:

- Low-energy grains are approximated as existing in an equilibrium (Boltzmann) distribution.

- High-energy grains are approximated as existing in pseudo-steady state.

The approximations are applied to every grain in the system; the cutoff between the low-energy and high-energy approximations is generally set a few grains below the lowest activation barrier for each isomer.

This results in a single linear system of equations that is a subset of the full master equation method, and can be solved for the pseudo-steady state populations of the high-energy grains. With knowledge of the populations of all grains determined, the phenomenological rates for all reactions in the network can be calculated.

Since there is a significant linear solve to perform, this method can occasionally be unsuccessful when the collision and reaction rates are highly disparate (making the linear solve very stiff). However, if successful, the resulting rates are generally more accurate than the modified strong collision method, and are obtained quite rapidly compared to more thorough (and expensive) methods.


Methods in ``rmg.unirxn.rs``
============================

.. function:: estimateratecoefficients_rs(T, P, E, Mcoll, densStates, E0, Eres, Kij, Fim, Gnj, dEdown, nIsom, nProd, nGrains, K, msg)

	Estimate the phenomenological rate coefficients using the (modified) strong
	collision method. The parameters are:
	
	============ ====== ========================================================
	Parameter    Intent Description
	============ ====== ========================================================
	`T`          in     The temperature to evaluate k(T,P) at in K
	`P`          in     The pressure to evaluate k(T,P) at in Pa
	`E`          in     A 1D array of energies in J/mol
	`Mcoll`      in     The collision matrix for each isomer
	`densStates` in     The density of states for each isomer
	`E0`         in     The ground-state energy for each isomer in J/mol
	`Eres`       in     The active-state energy cutoffs for each isomer in J/mol
	`Kij`        in     The microcanonical isomerization rate coefficients in
	                    s^-1
	`Fim`        in     The microcanonical association rates (rate coefficients
	                    times bimolecular equilibrium distributions) in s^-1
	`Gnj`        in     The microcanonical dissociation rate coefficients in
	                    s^-1
	`dEdown`     in     The average energy transferred in a deactivating
	                    collision in J/mol
	`nIsom`      in     The number of isomers in the network
	`nProd`      in     The number of reactant/product channels in the network
	`nGrains`    in     The number of energy grains being used
	`K`          out    The matrix of phenomenological rate coefficients k(T,P)
	`msg`        out    If the subroutine was unsuccessful, this string will
	                    contain a brief message describing the error; the
	                    string will be empty if the subroutine was successful
	============ ====== ========================================================


.. function:: reservoircutoffs(E0, Eres, nIsom, E, nGrains, dEdown, nRes)

	Determines the grain below which the reservoir approximation will be used
	and above which the pseudo-steady state approximation will be used by
	examining the energies of the transition states connected to each
	unimolecular isomer. The parameters are:
	
	========== ====== ========================================================
	Parameter  Intent Description
	========== ====== ========================================================
	`E0`       in     The ground-state energy for each isomer in J/mol
	`Eres`     in     The active-state energy cutoffs for each isomer in J/mol
	`nIsom`    in     The number of isomers in the network
	`E`        in     A 1D array of energies in J/mol
	`nGrains`  in     The number of energy grains being used
	`dEdown`   in     The average energy transferred in a deactivating
	                  collision in J/mol
	`nRes`     out    The number of reservoir grains for each isomer
	========== ====== ========================================================


.. function:: activestatefull(T, P, E, Mcoll, densStates, Kij, Fim, Gnj, nIsom, nProd, nGrains, nRes, nAct, pa, msg)

	Determine the pseudo-steady state populations for the active state
	grains using a full matrix linear solve.
	
	============ ====== ========================================================
	Parameter    Intent Description
	============ ====== ========================================================
	`E`          in     A 1D array of energies in J/mol
	`Mcoll`      in     The collision matrix for each isomer
	`densStates` in     The density of states for each isomer
	`Kij`        in     The microcanonical isomerization rate coefficients in
	                    s^-1
	`Fim`        in     The microcanonical association rates (rate coefficients
	                    times bimolecular equilibrium distributions) in s^-1
	`Gnj`        in     The microcanonical dissociation rate coefficients in
	                    s^-1
	`nIsom`      in     The number of isomers in the network
	`nProd`      in     The number of reactant/product channels in the network
	`nGrains`    in     The number of energy grains being used
	`nRes`       out    The number of reservoir grains for each isomer
	`nAct`       out    The number of active-state grains for each isomer
	`pa`         out    The steady state populations
	`msg`        out    If the subroutine was unsuccessful, this string will
	                    contain a brief message describing the error; the
	                    string will be empty if the subroutine was successful
	============ ====== ========================================================



.. function:: activestatebanded(T, P, E, Mcoll, densStates, Kij, Fim, Gnj, dEdown, nIsom, nProd, nGrains, nRes, nAct, pa, msg)
	
	Determine the pseudo-steady state populations for the active state
	grains using a banded matrix linear solve.
	
	========== ====== ========================================================
	Parameter  Intent Description
	========== ====== ========================================================
	`E`        in     A 1D array of energies in J/mol
	`Mcoll`    in     The collision matrix for each isomer
	`eqDist`   in     The normalized equilibrium distributions for each isomer
	`Kij`      in     The microcanonical isomerization rate coefficients in
	                  s^-1
	`Fim`      in     The microcanonical association rates (rate coefficients
	                  times bimolecular equilibrium distributions) in s^-1
	`Gnj`      in     The microcanonical dissociation rate coefficients in
	                  s^-1
	`dEdown`   in     The average energy transferred in a deactivating
	                  collision in J/mol
	`nIsom`    in     The number of isomers in the network
	`nProd`    in     The number of reactant/product channels in the network
	`nGrains`  in     The number of energy grains being used
	`nRes`     out    The number of reservoir grains for each isomer
	`nAct`     out    The number of active-state grains for each isomer
	`pa`       out    The steady state populations
	`msg`      out    If the subroutine was unsuccessful, this string will
	                  contain a brief message describing the error; the
	                  string will be empty if the subroutine was successful
	========== ====== ========================================================


.. function:: accountingmatrix(nGrains, nIsom, nRes, indices)

	Determine a mapping of isomer and grain indices to matrix element indices.
	This inner grouping is isomer/product index, while the outer grouping is
	energy grain index; this results in a much more tightly banded matrix than
	the reverse. The output is a matrix where row is grain number, column is
	isomer/product number, and the value is the index into the matrix.
	
